// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	vcommon "github.com/trustbloc/fabric-peer-ext/pkg/validation/common"
)

type ValidationProvider struct {
	SendValidationRequestStub        func(channelID string, req *vcommon.ValidationRequest)
	sendValidationRequestMutex       sync.RWMutex
	sendValidationRequestArgsForCall []struct {
		channelID string
		req       *vcommon.ValidationRequest
	}
	ValidatePendingStub        func(channelID string, blockNum uint64)
	validatePendingMutex       sync.RWMutex
	validatePendingArgsForCall []struct {
		channelID string
		blockNum  uint64
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ValidationProvider) SendValidationRequest(channelID string, req *vcommon.ValidationRequest) {
	fake.sendValidationRequestMutex.Lock()
	fake.sendValidationRequestArgsForCall = append(fake.sendValidationRequestArgsForCall, struct {
		channelID string
		req       *vcommon.ValidationRequest
	}{channelID, req})
	fake.recordInvocation("SendValidationRequest", []interface{}{channelID, req})
	fake.sendValidationRequestMutex.Unlock()
	if fake.SendValidationRequestStub != nil {
		fake.SendValidationRequestStub(channelID, req)
	}
}

func (fake *ValidationProvider) SendValidationRequestCallCount() int {
	fake.sendValidationRequestMutex.RLock()
	defer fake.sendValidationRequestMutex.RUnlock()
	return len(fake.sendValidationRequestArgsForCall)
}

func (fake *ValidationProvider) SendValidationRequestArgsForCall(i int) (string, *vcommon.ValidationRequest) {
	fake.sendValidationRequestMutex.RLock()
	defer fake.sendValidationRequestMutex.RUnlock()
	return fake.sendValidationRequestArgsForCall[i].channelID, fake.sendValidationRequestArgsForCall[i].req
}

func (fake *ValidationProvider) ValidatePending(channelID string, blockNum uint64) {
	fake.validatePendingMutex.Lock()
	fake.validatePendingArgsForCall = append(fake.validatePendingArgsForCall, struct {
		channelID string
		blockNum  uint64
	}{channelID, blockNum})
	fake.recordInvocation("ValidatePending", []interface{}{channelID, blockNum})
	fake.validatePendingMutex.Unlock()
	if fake.ValidatePendingStub != nil {
		fake.ValidatePendingStub(channelID, blockNum)
	}
}

func (fake *ValidationProvider) ValidatePendingCallCount() int {
	fake.validatePendingMutex.RLock()
	defer fake.validatePendingMutex.RUnlock()
	return len(fake.validatePendingArgsForCall)
}

func (fake *ValidationProvider) ValidatePendingArgsForCall(i int) (string, uint64) {
	fake.validatePendingMutex.RLock()
	defer fake.validatePendingMutex.RUnlock()
	return fake.validatePendingArgsForCall[i].channelID, fake.validatePendingArgsForCall[i].blockNum
}

func (fake *ValidationProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendValidationRequestMutex.RLock()
	defer fake.sendValidationRequestMutex.RUnlock()
	fake.validatePendingMutex.RLock()
	defer fake.validatePendingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ValidationProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
