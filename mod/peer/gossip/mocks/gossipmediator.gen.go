// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-protos-go/common"
	proto "github.com/hyperledger/fabric-protos-go/gossip"
	common2 "github.com/hyperledger/fabric/gossip/common"
	"github.com/hyperledger/fabric/gossip/discovery"
)

type GossipServiceMediator struct {
	VerifyBlockStub        func(channelID common2.ChannelID, seqNum uint64, signedBlock *common.Block) error
	verifyBlockMutex       sync.RWMutex
	verifyBlockArgsForCall []struct {
		channelID   common2.ChannelID
		seqNum      uint64
		signedBlock *common.Block
	}
	verifyBlockReturns struct {
		result1 error
	}
	verifyBlockReturnsOnCall map[int]struct {
		result1 error
	}
	PeersOfChannelStub        func(common2.ChannelID) []discovery.NetworkMember
	peersOfChannelMutex       sync.RWMutex
	peersOfChannelArgsForCall []struct {
		arg1 common2.ChannelID
	}
	peersOfChannelReturns struct {
		result1 []discovery.NetworkMember
	}
	peersOfChannelReturnsOnCall map[int]struct {
		result1 []discovery.NetworkMember
	}
	GossipStub        func(msg *proto.GossipMessage)
	gossipMutex       sync.RWMutex
	gossipArgsForCall []struct {
		msg *proto.GossipMessage
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *GossipServiceMediator) VerifyBlock(channelID common2.ChannelID, seqNum uint64, signedBlock *common.Block) error {
	fake.verifyBlockMutex.Lock()
	ret, specificReturn := fake.verifyBlockReturnsOnCall[len(fake.verifyBlockArgsForCall)]
	fake.verifyBlockArgsForCall = append(fake.verifyBlockArgsForCall, struct {
		channelID   common2.ChannelID
		seqNum      uint64
		signedBlock *common.Block
	}{channelID, seqNum, signedBlock})
	fake.recordInvocation("VerifyBlock", []interface{}{channelID, seqNum, signedBlock})
	fake.verifyBlockMutex.Unlock()
	if fake.VerifyBlockStub != nil {
		return fake.VerifyBlockStub(channelID, seqNum, signedBlock)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.verifyBlockReturns.result1
}

func (fake *GossipServiceMediator) VerifyBlockCallCount() int {
	fake.verifyBlockMutex.RLock()
	defer fake.verifyBlockMutex.RUnlock()
	return len(fake.verifyBlockArgsForCall)
}

func (fake *GossipServiceMediator) VerifyBlockArgsForCall(i int) (common2.ChannelID, uint64, *common.Block) {
	fake.verifyBlockMutex.RLock()
	defer fake.verifyBlockMutex.RUnlock()
	return fake.verifyBlockArgsForCall[i].channelID, fake.verifyBlockArgsForCall[i].seqNum, fake.verifyBlockArgsForCall[i].signedBlock
}

func (fake *GossipServiceMediator) VerifyBlockReturns(result1 error) {
	fake.VerifyBlockStub = nil
	fake.verifyBlockReturns = struct {
		result1 error
	}{result1}
}

func (fake *GossipServiceMediator) VerifyBlockReturnsOnCall(i int, result1 error) {
	fake.VerifyBlockStub = nil
	if fake.verifyBlockReturnsOnCall == nil {
		fake.verifyBlockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyBlockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *GossipServiceMediator) PeersOfChannel(arg1 common2.ChannelID) []discovery.NetworkMember {
	fake.peersOfChannelMutex.Lock()
	ret, specificReturn := fake.peersOfChannelReturnsOnCall[len(fake.peersOfChannelArgsForCall)]
	fake.peersOfChannelArgsForCall = append(fake.peersOfChannelArgsForCall, struct {
		arg1 common2.ChannelID
	}{arg1})
	fake.recordInvocation("PeersOfChannel", []interface{}{arg1})
	fake.peersOfChannelMutex.Unlock()
	if fake.PeersOfChannelStub != nil {
		return fake.PeersOfChannelStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.peersOfChannelReturns.result1
}

func (fake *GossipServiceMediator) PeersOfChannelCallCount() int {
	fake.peersOfChannelMutex.RLock()
	defer fake.peersOfChannelMutex.RUnlock()
	return len(fake.peersOfChannelArgsForCall)
}

func (fake *GossipServiceMediator) PeersOfChannelArgsForCall(i int) common2.ChannelID {
	fake.peersOfChannelMutex.RLock()
	defer fake.peersOfChannelMutex.RUnlock()
	return fake.peersOfChannelArgsForCall[i].arg1
}

func (fake *GossipServiceMediator) PeersOfChannelReturns(result1 []discovery.NetworkMember) {
	fake.PeersOfChannelStub = nil
	fake.peersOfChannelReturns = struct {
		result1 []discovery.NetworkMember
	}{result1}
}

func (fake *GossipServiceMediator) PeersOfChannelReturnsOnCall(i int, result1 []discovery.NetworkMember) {
	fake.PeersOfChannelStub = nil
	if fake.peersOfChannelReturnsOnCall == nil {
		fake.peersOfChannelReturnsOnCall = make(map[int]struct {
			result1 []discovery.NetworkMember
		})
	}
	fake.peersOfChannelReturnsOnCall[i] = struct {
		result1 []discovery.NetworkMember
	}{result1}
}

func (fake *GossipServiceMediator) Gossip(msg *proto.GossipMessage) {
	fake.gossipMutex.Lock()
	fake.gossipArgsForCall = append(fake.gossipArgsForCall, struct {
		msg *proto.GossipMessage
	}{msg})
	fake.recordInvocation("Gossip", []interface{}{msg})
	fake.gossipMutex.Unlock()
	if fake.GossipStub != nil {
		fake.GossipStub(msg)
	}
}

func (fake *GossipServiceMediator) GossipCallCount() int {
	fake.gossipMutex.RLock()
	defer fake.gossipMutex.RUnlock()
	return len(fake.gossipArgsForCall)
}

func (fake *GossipServiceMediator) GossipArgsForCall(i int) *proto.GossipMessage {
	fake.gossipMutex.RLock()
	defer fake.gossipMutex.RUnlock()
	return fake.gossipArgsForCall[i].msg
}

func (fake *GossipServiceMediator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifyBlockMutex.RLock()
	defer fake.verifyBlockMutex.RUnlock()
	fake.peersOfChannelMutex.RLock()
	defer fake.peersOfChannelMutex.RUnlock()
	fake.gossipMutex.RLock()
	defer fake.gossipMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *GossipServiceMediator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
