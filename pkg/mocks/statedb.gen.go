// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	statedbtxmgmt "github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb"
)

type StateDB struct {
	GetStateStub        func(namespace string, key string) ([]byte, error)
	getStateMutex       sync.RWMutex
	getStateArgsForCall []struct {
		namespace string
		key       string
	}
	getStateReturns struct {
		result1 []byte
		result2 error
	}
	getStateReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetStateMultipleKeysStub        func(namespace string, keys []string) ([][]byte, error)
	getStateMultipleKeysMutex       sync.RWMutex
	getStateMultipleKeysArgsForCall []struct {
		namespace string
		keys      []string
	}
	getStateMultipleKeysReturns struct {
		result1 [][]byte
		result2 error
	}
	getStateMultipleKeysReturnsOnCall map[int]struct {
		result1 [][]byte
		result2 error
	}
	GetStateRangeScanIteratorStub        func(namespace string, startKey string, endKey string) (statedbtxmgmt.ResultsIterator, error)
	getStateRangeScanIteratorMutex       sync.RWMutex
	getStateRangeScanIteratorArgsForCall []struct {
		namespace string
		startKey  string
		endKey    string
	}
	getStateRangeScanIteratorReturns struct {
		result1 statedbtxmgmt.ResultsIterator
		result2 error
	}
	getStateRangeScanIteratorReturnsOnCall map[int]struct {
		result1 statedbtxmgmt.ResultsIterator
		result2 error
	}
	GetStateRangeScanIteratorWithPaginationStub        func(namespace string, startKey string, endKey string, pageSize int32) (statedbtxmgmt.QueryResultsIterator, error)
	getStateRangeScanIteratorWithPaginationMutex       sync.RWMutex
	getStateRangeScanIteratorWithPaginationArgsForCall []struct {
		namespace string
		startKey  string
		endKey    string
		pageSize  int32
	}
	getStateRangeScanIteratorWithPaginationReturns struct {
		result1 statedbtxmgmt.QueryResultsIterator
		result2 error
	}
	getStateRangeScanIteratorWithPaginationReturnsOnCall map[int]struct {
		result1 statedbtxmgmt.QueryResultsIterator
		result2 error
	}
	ExecuteQueryStub        func(namespace, query string) (statedbtxmgmt.ResultsIterator, error)
	executeQueryMutex       sync.RWMutex
	executeQueryArgsForCall []struct {
		namespace string
		query     string
	}
	executeQueryReturns struct {
		result1 statedbtxmgmt.ResultsIterator
		result2 error
	}
	executeQueryReturnsOnCall map[int]struct {
		result1 statedbtxmgmt.ResultsIterator
		result2 error
	}
	ExecuteQueryWithPaginationStub        func(namespace, query, bookmark string, pageSize int32) (statedbtxmgmt.QueryResultsIterator, error)
	executeQueryWithPaginationMutex       sync.RWMutex
	executeQueryWithPaginationArgsForCall []struct {
		namespace string
		query     string
		bookmark  string
		pageSize  int32
	}
	executeQueryWithPaginationReturns struct {
		result1 statedbtxmgmt.QueryResultsIterator
		result2 error
	}
	executeQueryWithPaginationReturnsOnCall map[int]struct {
		result1 statedbtxmgmt.QueryResultsIterator
		result2 error
	}
	BytesKeySupportedStub        func() bool
	bytesKeySupportedMutex       sync.RWMutex
	bytesKeySupportedArgsForCall []struct{}
	bytesKeySupportedReturns     struct {
		result1 bool
	}
	bytesKeySupportedReturnsOnCall map[int]struct {
		result1 bool
	}
	UpdateCacheStub        func(blockNum uint64, updates []byte) error
	updateCacheMutex       sync.RWMutex
	updateCacheArgsForCall []struct {
		blockNum uint64
		updates  []byte
	}
	updateCacheReturns struct {
		result1 error
	}
	updateCacheReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StateDB) GetState(namespace string, key string) ([]byte, error) {
	fake.getStateMutex.Lock()
	ret, specificReturn := fake.getStateReturnsOnCall[len(fake.getStateArgsForCall)]
	fake.getStateArgsForCall = append(fake.getStateArgsForCall, struct {
		namespace string
		key       string
	}{namespace, key})
	fake.recordInvocation("GetState", []interface{}{namespace, key})
	fake.getStateMutex.Unlock()
	if fake.GetStateStub != nil {
		return fake.GetStateStub(namespace, key)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStateReturns.result1, fake.getStateReturns.result2
}

func (fake *StateDB) GetStateCallCount() int {
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	return len(fake.getStateArgsForCall)
}

func (fake *StateDB) GetStateArgsForCall(i int) (string, string) {
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	return fake.getStateArgsForCall[i].namespace, fake.getStateArgsForCall[i].key
}

func (fake *StateDB) GetStateReturns(result1 []byte, result2 error) {
	fake.GetStateStub = nil
	fake.getStateReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *StateDB) GetStateReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.GetStateStub = nil
	if fake.getStateReturnsOnCall == nil {
		fake.getStateReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getStateReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *StateDB) GetStateMultipleKeys(namespace string, keys []string) ([][]byte, error) {
	var keysCopy []string
	if keys != nil {
		keysCopy = make([]string, len(keys))
		copy(keysCopy, keys)
	}
	fake.getStateMultipleKeysMutex.Lock()
	ret, specificReturn := fake.getStateMultipleKeysReturnsOnCall[len(fake.getStateMultipleKeysArgsForCall)]
	fake.getStateMultipleKeysArgsForCall = append(fake.getStateMultipleKeysArgsForCall, struct {
		namespace string
		keys      []string
	}{namespace, keysCopy})
	fake.recordInvocation("GetStateMultipleKeys", []interface{}{namespace, keysCopy})
	fake.getStateMultipleKeysMutex.Unlock()
	if fake.GetStateMultipleKeysStub != nil {
		return fake.GetStateMultipleKeysStub(namespace, keys)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStateMultipleKeysReturns.result1, fake.getStateMultipleKeysReturns.result2
}

func (fake *StateDB) GetStateMultipleKeysCallCount() int {
	fake.getStateMultipleKeysMutex.RLock()
	defer fake.getStateMultipleKeysMutex.RUnlock()
	return len(fake.getStateMultipleKeysArgsForCall)
}

func (fake *StateDB) GetStateMultipleKeysArgsForCall(i int) (string, []string) {
	fake.getStateMultipleKeysMutex.RLock()
	defer fake.getStateMultipleKeysMutex.RUnlock()
	return fake.getStateMultipleKeysArgsForCall[i].namespace, fake.getStateMultipleKeysArgsForCall[i].keys
}

func (fake *StateDB) GetStateMultipleKeysReturns(result1 [][]byte, result2 error) {
	fake.GetStateMultipleKeysStub = nil
	fake.getStateMultipleKeysReturns = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

func (fake *StateDB) GetStateMultipleKeysReturnsOnCall(i int, result1 [][]byte, result2 error) {
	fake.GetStateMultipleKeysStub = nil
	if fake.getStateMultipleKeysReturnsOnCall == nil {
		fake.getStateMultipleKeysReturnsOnCall = make(map[int]struct {
			result1 [][]byte
			result2 error
		})
	}
	fake.getStateMultipleKeysReturnsOnCall[i] = struct {
		result1 [][]byte
		result2 error
	}{result1, result2}
}

func (fake *StateDB) GetStateRangeScanIterator(namespace string, startKey string, endKey string) (statedbtxmgmt.ResultsIterator, error) {
	fake.getStateRangeScanIteratorMutex.Lock()
	ret, specificReturn := fake.getStateRangeScanIteratorReturnsOnCall[len(fake.getStateRangeScanIteratorArgsForCall)]
	fake.getStateRangeScanIteratorArgsForCall = append(fake.getStateRangeScanIteratorArgsForCall, struct {
		namespace string
		startKey  string
		endKey    string
	}{namespace, startKey, endKey})
	fake.recordInvocation("GetStateRangeScanIterator", []interface{}{namespace, startKey, endKey})
	fake.getStateRangeScanIteratorMutex.Unlock()
	if fake.GetStateRangeScanIteratorStub != nil {
		return fake.GetStateRangeScanIteratorStub(namespace, startKey, endKey)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStateRangeScanIteratorReturns.result1, fake.getStateRangeScanIteratorReturns.result2
}

func (fake *StateDB) GetStateRangeScanIteratorCallCount() int {
	fake.getStateRangeScanIteratorMutex.RLock()
	defer fake.getStateRangeScanIteratorMutex.RUnlock()
	return len(fake.getStateRangeScanIteratorArgsForCall)
}

func (fake *StateDB) GetStateRangeScanIteratorArgsForCall(i int) (string, string, string) {
	fake.getStateRangeScanIteratorMutex.RLock()
	defer fake.getStateRangeScanIteratorMutex.RUnlock()
	return fake.getStateRangeScanIteratorArgsForCall[i].namespace, fake.getStateRangeScanIteratorArgsForCall[i].startKey, fake.getStateRangeScanIteratorArgsForCall[i].endKey
}

func (fake *StateDB) GetStateRangeScanIteratorReturns(result1 statedbtxmgmt.ResultsIterator, result2 error) {
	fake.GetStateRangeScanIteratorStub = nil
	fake.getStateRangeScanIteratorReturns = struct {
		result1 statedbtxmgmt.ResultsIterator
		result2 error
	}{result1, result2}
}

func (fake *StateDB) GetStateRangeScanIteratorReturnsOnCall(i int, result1 statedbtxmgmt.ResultsIterator, result2 error) {
	fake.GetStateRangeScanIteratorStub = nil
	if fake.getStateRangeScanIteratorReturnsOnCall == nil {
		fake.getStateRangeScanIteratorReturnsOnCall = make(map[int]struct {
			result1 statedbtxmgmt.ResultsIterator
			result2 error
		})
	}
	fake.getStateRangeScanIteratorReturnsOnCall[i] = struct {
		result1 statedbtxmgmt.ResultsIterator
		result2 error
	}{result1, result2}
}

func (fake *StateDB) GetStateRangeScanIteratorWithPagination(namespace string, startKey string, endKey string, pageSize int32) (statedbtxmgmt.QueryResultsIterator, error) {
	fake.getStateRangeScanIteratorWithPaginationMutex.Lock()
	ret, specificReturn := fake.getStateRangeScanIteratorWithPaginationReturnsOnCall[len(fake.getStateRangeScanIteratorWithPaginationArgsForCall)]
	fake.getStateRangeScanIteratorWithPaginationArgsForCall = append(fake.getStateRangeScanIteratorWithPaginationArgsForCall, struct {
		namespace string
		startKey  string
		endKey    string
		pageSize  int32
	}{namespace, startKey, endKey, pageSize})
	fake.recordInvocation("GetStateRangeScanIteratorWithPagination", []interface{}{namespace, startKey, endKey, pageSize})
	fake.getStateRangeScanIteratorWithPaginationMutex.Unlock()
	if fake.GetStateRangeScanIteratorWithPaginationStub != nil {
		return fake.GetStateRangeScanIteratorWithPaginationStub(namespace, startKey, endKey, pageSize)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getStateRangeScanIteratorWithPaginationReturns.result1, fake.getStateRangeScanIteratorWithPaginationReturns.result2
}

func (fake *StateDB) GetStateRangeScanIteratorWithPaginationCallCount() int {
	fake.getStateRangeScanIteratorWithPaginationMutex.RLock()
	defer fake.getStateRangeScanIteratorWithPaginationMutex.RUnlock()
	return len(fake.getStateRangeScanIteratorWithPaginationArgsForCall)
}

func (fake *StateDB) GetStateRangeScanIteratorWithPaginationArgsForCall(i int) (string, string, string, int32) {
	fake.getStateRangeScanIteratorWithPaginationMutex.RLock()
	defer fake.getStateRangeScanIteratorWithPaginationMutex.RUnlock()
	return fake.getStateRangeScanIteratorWithPaginationArgsForCall[i].namespace, fake.getStateRangeScanIteratorWithPaginationArgsForCall[i].startKey, fake.getStateRangeScanIteratorWithPaginationArgsForCall[i].endKey, fake.getStateRangeScanIteratorWithPaginationArgsForCall[i].pageSize
}

func (fake *StateDB) GetStateRangeScanIteratorWithPaginationReturns(result1 statedbtxmgmt.QueryResultsIterator, result2 error) {
	fake.GetStateRangeScanIteratorWithPaginationStub = nil
	fake.getStateRangeScanIteratorWithPaginationReturns = struct {
		result1 statedbtxmgmt.QueryResultsIterator
		result2 error
	}{result1, result2}
}

func (fake *StateDB) GetStateRangeScanIteratorWithPaginationReturnsOnCall(i int, result1 statedbtxmgmt.QueryResultsIterator, result2 error) {
	fake.GetStateRangeScanIteratorWithPaginationStub = nil
	if fake.getStateRangeScanIteratorWithPaginationReturnsOnCall == nil {
		fake.getStateRangeScanIteratorWithPaginationReturnsOnCall = make(map[int]struct {
			result1 statedbtxmgmt.QueryResultsIterator
			result2 error
		})
	}
	fake.getStateRangeScanIteratorWithPaginationReturnsOnCall[i] = struct {
		result1 statedbtxmgmt.QueryResultsIterator
		result2 error
	}{result1, result2}
}

func (fake *StateDB) ExecuteQuery(namespace string, query string) (statedbtxmgmt.ResultsIterator, error) {
	fake.executeQueryMutex.Lock()
	ret, specificReturn := fake.executeQueryReturnsOnCall[len(fake.executeQueryArgsForCall)]
	fake.executeQueryArgsForCall = append(fake.executeQueryArgsForCall, struct {
		namespace string
		query     string
	}{namespace, query})
	fake.recordInvocation("ExecuteQuery", []interface{}{namespace, query})
	fake.executeQueryMutex.Unlock()
	if fake.ExecuteQueryStub != nil {
		return fake.ExecuteQueryStub(namespace, query)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.executeQueryReturns.result1, fake.executeQueryReturns.result2
}

func (fake *StateDB) ExecuteQueryCallCount() int {
	fake.executeQueryMutex.RLock()
	defer fake.executeQueryMutex.RUnlock()
	return len(fake.executeQueryArgsForCall)
}

func (fake *StateDB) ExecuteQueryArgsForCall(i int) (string, string) {
	fake.executeQueryMutex.RLock()
	defer fake.executeQueryMutex.RUnlock()
	return fake.executeQueryArgsForCall[i].namespace, fake.executeQueryArgsForCall[i].query
}

func (fake *StateDB) ExecuteQueryReturns(result1 statedbtxmgmt.ResultsIterator, result2 error) {
	fake.ExecuteQueryStub = nil
	fake.executeQueryReturns = struct {
		result1 statedbtxmgmt.ResultsIterator
		result2 error
	}{result1, result2}
}

func (fake *StateDB) ExecuteQueryReturnsOnCall(i int, result1 statedbtxmgmt.ResultsIterator, result2 error) {
	fake.ExecuteQueryStub = nil
	if fake.executeQueryReturnsOnCall == nil {
		fake.executeQueryReturnsOnCall = make(map[int]struct {
			result1 statedbtxmgmt.ResultsIterator
			result2 error
		})
	}
	fake.executeQueryReturnsOnCall[i] = struct {
		result1 statedbtxmgmt.ResultsIterator
		result2 error
	}{result1, result2}
}

func (fake *StateDB) ExecuteQueryWithPagination(namespace string, query string, bookmark string, pageSize int32) (statedbtxmgmt.QueryResultsIterator, error) {
	fake.executeQueryWithPaginationMutex.Lock()
	ret, specificReturn := fake.executeQueryWithPaginationReturnsOnCall[len(fake.executeQueryWithPaginationArgsForCall)]
	fake.executeQueryWithPaginationArgsForCall = append(fake.executeQueryWithPaginationArgsForCall, struct {
		namespace string
		query     string
		bookmark  string
		pageSize  int32
	}{namespace, query, bookmark, pageSize})
	fake.recordInvocation("ExecuteQueryWithPagination", []interface{}{namespace, query, bookmark, pageSize})
	fake.executeQueryWithPaginationMutex.Unlock()
	if fake.ExecuteQueryWithPaginationStub != nil {
		return fake.ExecuteQueryWithPaginationStub(namespace, query, bookmark, pageSize)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.executeQueryWithPaginationReturns.result1, fake.executeQueryWithPaginationReturns.result2
}

func (fake *StateDB) ExecuteQueryWithPaginationCallCount() int {
	fake.executeQueryWithPaginationMutex.RLock()
	defer fake.executeQueryWithPaginationMutex.RUnlock()
	return len(fake.executeQueryWithPaginationArgsForCall)
}

func (fake *StateDB) ExecuteQueryWithPaginationArgsForCall(i int) (string, string, string, int32) {
	fake.executeQueryWithPaginationMutex.RLock()
	defer fake.executeQueryWithPaginationMutex.RUnlock()
	return fake.executeQueryWithPaginationArgsForCall[i].namespace, fake.executeQueryWithPaginationArgsForCall[i].query, fake.executeQueryWithPaginationArgsForCall[i].bookmark, fake.executeQueryWithPaginationArgsForCall[i].pageSize
}

func (fake *StateDB) ExecuteQueryWithPaginationReturns(result1 statedbtxmgmt.QueryResultsIterator, result2 error) {
	fake.ExecuteQueryWithPaginationStub = nil
	fake.executeQueryWithPaginationReturns = struct {
		result1 statedbtxmgmt.QueryResultsIterator
		result2 error
	}{result1, result2}
}

func (fake *StateDB) ExecuteQueryWithPaginationReturnsOnCall(i int, result1 statedbtxmgmt.QueryResultsIterator, result2 error) {
	fake.ExecuteQueryWithPaginationStub = nil
	if fake.executeQueryWithPaginationReturnsOnCall == nil {
		fake.executeQueryWithPaginationReturnsOnCall = make(map[int]struct {
			result1 statedbtxmgmt.QueryResultsIterator
			result2 error
		})
	}
	fake.executeQueryWithPaginationReturnsOnCall[i] = struct {
		result1 statedbtxmgmt.QueryResultsIterator
		result2 error
	}{result1, result2}
}

func (fake *StateDB) BytesKeySupported() bool {
	fake.bytesKeySupportedMutex.Lock()
	ret, specificReturn := fake.bytesKeySupportedReturnsOnCall[len(fake.bytesKeySupportedArgsForCall)]
	fake.bytesKeySupportedArgsForCall = append(fake.bytesKeySupportedArgsForCall, struct{}{})
	fake.recordInvocation("BytesKeySupported", []interface{}{})
	fake.bytesKeySupportedMutex.Unlock()
	if fake.BytesKeySupportedStub != nil {
		return fake.BytesKeySupportedStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.bytesKeySupportedReturns.result1
}

func (fake *StateDB) BytesKeySupportedCallCount() int {
	fake.bytesKeySupportedMutex.RLock()
	defer fake.bytesKeySupportedMutex.RUnlock()
	return len(fake.bytesKeySupportedArgsForCall)
}

func (fake *StateDB) BytesKeySupportedReturns(result1 bool) {
	fake.BytesKeySupportedStub = nil
	fake.bytesKeySupportedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *StateDB) BytesKeySupportedReturnsOnCall(i int, result1 bool) {
	fake.BytesKeySupportedStub = nil
	if fake.bytesKeySupportedReturnsOnCall == nil {
		fake.bytesKeySupportedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.bytesKeySupportedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *StateDB) UpdateCache(blockNum uint64, updates []byte) error {
	var updatesCopy []byte
	if updates != nil {
		updatesCopy = make([]byte, len(updates))
		copy(updatesCopy, updates)
	}
	fake.updateCacheMutex.Lock()
	ret, specificReturn := fake.updateCacheReturnsOnCall[len(fake.updateCacheArgsForCall)]
	fake.updateCacheArgsForCall = append(fake.updateCacheArgsForCall, struct {
		blockNum uint64
		updates  []byte
	}{blockNum, updatesCopy})
	fake.recordInvocation("UpdateCache", []interface{}{blockNum, updatesCopy})
	fake.updateCacheMutex.Unlock()
	if fake.UpdateCacheStub != nil {
		return fake.UpdateCacheStub(blockNum, updates)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateCacheReturns.result1
}

func (fake *StateDB) UpdateCacheCallCount() int {
	fake.updateCacheMutex.RLock()
	defer fake.updateCacheMutex.RUnlock()
	return len(fake.updateCacheArgsForCall)
}

func (fake *StateDB) UpdateCacheArgsForCall(i int) (uint64, []byte) {
	fake.updateCacheMutex.RLock()
	defer fake.updateCacheMutex.RUnlock()
	return fake.updateCacheArgsForCall[i].blockNum, fake.updateCacheArgsForCall[i].updates
}

func (fake *StateDB) UpdateCacheReturns(result1 error) {
	fake.UpdateCacheStub = nil
	fake.updateCacheReturns = struct {
		result1 error
	}{result1}
}

func (fake *StateDB) UpdateCacheReturnsOnCall(i int, result1 error) {
	fake.UpdateCacheStub = nil
	if fake.updateCacheReturnsOnCall == nil {
		fake.updateCacheReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCacheReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *StateDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getStateMutex.RLock()
	defer fake.getStateMutex.RUnlock()
	fake.getStateMultipleKeysMutex.RLock()
	defer fake.getStateMultipleKeysMutex.RUnlock()
	fake.getStateRangeScanIteratorMutex.RLock()
	defer fake.getStateRangeScanIteratorMutex.RUnlock()
	fake.getStateRangeScanIteratorWithPaginationMutex.RLock()
	defer fake.getStateRangeScanIteratorWithPaginationMutex.RUnlock()
	fake.executeQueryMutex.RLock()
	defer fake.executeQueryMutex.RUnlock()
	fake.executeQueryWithPaginationMutex.RLock()
	defer fake.executeQueryWithPaginationMutex.RUnlock()
	fake.bytesKeySupportedMutex.RLock()
	defer fake.bytesKeySupportedMutex.RUnlock()
	fake.updateCacheMutex.RLock()
	defer fake.updateCacheMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *StateDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
