// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	cb "github.com/hyperledger/fabric-protos-go/common"
	"github.com/trustbloc/fabric-peer-ext/pkg/common/discovery"
	"github.com/trustbloc/fabric-peer-ext/pkg/common/txflags"
	"github.com/trustbloc/fabric-peer-ext/pkg/validation/common"
	"github.com/trustbloc/fabric-peer-ext/pkg/validation/validationresults"
)

type DistributedValidator struct {
	ValidatePartialStub        func(ctx context.Context, block *cb.Block) (txflags.ValidationFlags, []string, error)
	validatePartialMutex       sync.RWMutex
	validatePartialArgsForCall []struct {
		ctx   context.Context
		block *cb.Block
	}
	validatePartialReturns struct {
		result1 txflags.ValidationFlags
		result2 []string
		result3 error
	}
	validatePartialReturnsOnCall map[int]struct {
		result1 txflags.ValidationFlags
		result2 []string
		result3 error
	}
	SubmitValidationResultsStub        func(results *validationresults.Results)
	submitValidationResultsMutex       sync.RWMutex
	submitValidationResultsArgsForCall []struct {
		results *validationresults.Results
	}
	GetValidatingPeersStub        func(block *cb.Block) (discovery.PeerGroup, error)
	getValidatingPeersMutex       sync.RWMutex
	getValidatingPeersArgsForCall []struct {
		block *cb.Block
	}
	getValidatingPeersReturns struct {
		result1 discovery.PeerGroup
		result2 error
	}
	getValidatingPeersReturnsOnCall map[int]struct {
		result1 discovery.PeerGroup
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DistributedValidator) ValidatePartial(ctx context.Context, block *cb.Block) (txflags.ValidationFlags, []string, error) {
	fake.validatePartialMutex.Lock()
	ret, specificReturn := fake.validatePartialReturnsOnCall[len(fake.validatePartialArgsForCall)]
	fake.validatePartialArgsForCall = append(fake.validatePartialArgsForCall, struct {
		ctx   context.Context
		block *cb.Block
	}{ctx, block})
	fake.recordInvocation("ValidatePartial", []interface{}{ctx, block})
	fake.validatePartialMutex.Unlock()
	if fake.ValidatePartialStub != nil {
		return fake.ValidatePartialStub(ctx, block)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.validatePartialReturns.result1, fake.validatePartialReturns.result2, fake.validatePartialReturns.result3
}

func (fake *DistributedValidator) ValidatePartialCallCount() int {
	fake.validatePartialMutex.RLock()
	defer fake.validatePartialMutex.RUnlock()
	return len(fake.validatePartialArgsForCall)
}

func (fake *DistributedValidator) ValidatePartialArgsForCall(i int) (context.Context, *cb.Block) {
	fake.validatePartialMutex.RLock()
	defer fake.validatePartialMutex.RUnlock()
	return fake.validatePartialArgsForCall[i].ctx, fake.validatePartialArgsForCall[i].block
}

func (fake *DistributedValidator) ValidatePartialReturns(result1 txflags.ValidationFlags, result2 []string, result3 error) {
	fake.ValidatePartialStub = nil
	fake.validatePartialReturns = struct {
		result1 txflags.ValidationFlags
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *DistributedValidator) ValidatePartialReturnsOnCall(i int, result1 txflags.ValidationFlags, result2 []string, result3 error) {
	fake.ValidatePartialStub = nil
	if fake.validatePartialReturnsOnCall == nil {
		fake.validatePartialReturnsOnCall = make(map[int]struct {
			result1 txflags.ValidationFlags
			result2 []string
			result3 error
		})
	}
	fake.validatePartialReturnsOnCall[i] = struct {
		result1 txflags.ValidationFlags
		result2 []string
		result3 error
	}{result1, result2, result3}
}

func (fake *DistributedValidator) SubmitValidationResults(results *validationresults.Results) {
	fake.submitValidationResultsMutex.Lock()
	fake.submitValidationResultsArgsForCall = append(fake.submitValidationResultsArgsForCall, struct {
		results *validationresults.Results
	}{results})
	fake.recordInvocation("SubmitValidationResults", []interface{}{results})
	fake.submitValidationResultsMutex.Unlock()
	if fake.SubmitValidationResultsStub != nil {
		fake.SubmitValidationResultsStub(results)
	}
}

func (fake *DistributedValidator) SubmitValidationResultsCallCount() int {
	fake.submitValidationResultsMutex.RLock()
	defer fake.submitValidationResultsMutex.RUnlock()
	return len(fake.submitValidationResultsArgsForCall)
}

func (fake *DistributedValidator) SubmitValidationResultsArgsForCall(i int) *validationresults.Results {
	fake.submitValidationResultsMutex.RLock()
	defer fake.submitValidationResultsMutex.RUnlock()
	return fake.submitValidationResultsArgsForCall[i].results
}

func (fake *DistributedValidator) GetValidatingPeers(block *cb.Block) (discovery.PeerGroup, error) {
	fake.getValidatingPeersMutex.Lock()
	ret, specificReturn := fake.getValidatingPeersReturnsOnCall[len(fake.getValidatingPeersArgsForCall)]
	fake.getValidatingPeersArgsForCall = append(fake.getValidatingPeersArgsForCall, struct {
		block *cb.Block
	}{block})
	fake.recordInvocation("GetValidatingPeers", []interface{}{block})
	fake.getValidatingPeersMutex.Unlock()
	if fake.GetValidatingPeersStub != nil {
		return fake.GetValidatingPeersStub(block)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getValidatingPeersReturns.result1, fake.getValidatingPeersReturns.result2
}

func (fake *DistributedValidator) GetValidatingPeersCallCount() int {
	fake.getValidatingPeersMutex.RLock()
	defer fake.getValidatingPeersMutex.RUnlock()
	return len(fake.getValidatingPeersArgsForCall)
}

func (fake *DistributedValidator) GetValidatingPeersArgsForCall(i int) *cb.Block {
	fake.getValidatingPeersMutex.RLock()
	defer fake.getValidatingPeersMutex.RUnlock()
	return fake.getValidatingPeersArgsForCall[i].block
}

func (fake *DistributedValidator) GetValidatingPeersReturns(result1 discovery.PeerGroup, result2 error) {
	fake.GetValidatingPeersStub = nil
	fake.getValidatingPeersReturns = struct {
		result1 discovery.PeerGroup
		result2 error
	}{result1, result2}
}

func (fake *DistributedValidator) GetValidatingPeersReturnsOnCall(i int, result1 discovery.PeerGroup, result2 error) {
	fake.GetValidatingPeersStub = nil
	if fake.getValidatingPeersReturnsOnCall == nil {
		fake.getValidatingPeersReturnsOnCall = make(map[int]struct {
			result1 discovery.PeerGroup
			result2 error
		})
	}
	fake.getValidatingPeersReturnsOnCall[i] = struct {
		result1 discovery.PeerGroup
		result2 error
	}{result1, result2}
}

func (fake *DistributedValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validatePartialMutex.RLock()
	defer fake.validatePartialMutex.RUnlock()
	fake.submitValidationResultsMutex.RLock()
	defer fake.submitValidationResultsMutex.RUnlock()
	fake.getValidatingPeersMutex.RLock()
	defer fake.getValidatingPeersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DistributedValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.DistributedValidator = new(DistributedValidator)
