// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"
)

type ContextProvider struct {
	ValidationContextForBlockStub        func(channelID string, blockNum uint64) (context.Context, error)
	validationContextForBlockMutex       sync.RWMutex
	validationContextForBlockArgsForCall []struct {
		channelID string
		blockNum  uint64
	}
	validationContextForBlockReturns struct {
		result1 context.Context
		result2 error
	}
	validationContextForBlockReturnsOnCall map[int]struct {
		result1 context.Context
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ContextProvider) ValidationContextForBlock(channelID string, blockNum uint64) (context.Context, error) {
	fake.validationContextForBlockMutex.Lock()
	ret, specificReturn := fake.validationContextForBlockReturnsOnCall[len(fake.validationContextForBlockArgsForCall)]
	fake.validationContextForBlockArgsForCall = append(fake.validationContextForBlockArgsForCall, struct {
		channelID string
		blockNum  uint64
	}{channelID, blockNum})
	fake.recordInvocation("ValidationContextForBlock", []interface{}{channelID, blockNum})
	fake.validationContextForBlockMutex.Unlock()
	if fake.ValidationContextForBlockStub != nil {
		return fake.ValidationContextForBlockStub(channelID, blockNum)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.validationContextForBlockReturns.result1, fake.validationContextForBlockReturns.result2
}

func (fake *ContextProvider) ValidationContextForBlockCallCount() int {
	fake.validationContextForBlockMutex.RLock()
	defer fake.validationContextForBlockMutex.RUnlock()
	return len(fake.validationContextForBlockArgsForCall)
}

func (fake *ContextProvider) ValidationContextForBlockArgsForCall(i int) (string, uint64) {
	fake.validationContextForBlockMutex.RLock()
	defer fake.validationContextForBlockMutex.RUnlock()
	return fake.validationContextForBlockArgsForCall[i].channelID, fake.validationContextForBlockArgsForCall[i].blockNum
}

func (fake *ContextProvider) ValidationContextForBlockReturns(result1 context.Context, result2 error) {
	fake.ValidationContextForBlockStub = nil
	fake.validationContextForBlockReturns = struct {
		result1 context.Context
		result2 error
	}{result1, result2}
}

func (fake *ContextProvider) ValidationContextForBlockReturnsOnCall(i int, result1 context.Context, result2 error) {
	fake.ValidationContextForBlockStub = nil
	if fake.validationContextForBlockReturnsOnCall == nil {
		fake.validationContextForBlockReturnsOnCall = make(map[int]struct {
			result1 context.Context
			result2 error
		})
	}
	fake.validationContextForBlockReturnsOnCall[i] = struct {
		result1 context.Context
		result2 error
	}{result1, result2}
}

func (fake *ContextProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validationContextForBlockMutex.RLock()
	defer fake.validationContextForBlockMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ContextProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
