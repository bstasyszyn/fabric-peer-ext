// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	couchdb "github.com/hyperledger/fabric/core/ledger/kvledger/txmgmt/statedb/statecouchdb"
)

type CouchDB struct {
	ReadDocStub        func(id string) (*couchdb.CouchDoc, string, error)
	readDocMutex       sync.RWMutex
	readDocArgsForCall []struct {
		id string
	}
	readDocReturns struct {
		result1 *couchdb.CouchDoc
		result2 string
		result3 error
	}
	readDocReturnsOnCall map[int]struct {
		result1 *couchdb.CouchDoc
		result2 string
		result3 error
	}
	SaveDocStub        func(id string, rev string, couchDoc *couchdb.CouchDoc) (string, error)
	saveDocMutex       sync.RWMutex
	saveDocArgsForCall []struct {
		id       string
		rev      string
		couchDoc *couchdb.CouchDoc
	}
	saveDocReturns struct {
		result1 string
		result2 error
	}
	saveDocReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	QueryDocumentsStub        func(query string) ([]*couchdb.QueryResult, string, error)
	queryDocumentsMutex       sync.RWMutex
	queryDocumentsArgsForCall []struct {
		query string
	}
	queryDocumentsReturns struct {
		result1 []*couchdb.QueryResult
		result2 string
		result3 error
	}
	queryDocumentsReturnsOnCall map[int]struct {
		result1 []*couchdb.QueryResult
		result2 string
		result3 error
	}
	BatchUpdateDocumentsStub        func(documents []*couchdb.CouchDoc) ([]*couchdb.BatchUpdateResponse, error)
	batchUpdateDocumentsMutex       sync.RWMutex
	batchUpdateDocumentsArgsForCall []struct {
		documents []*couchdb.CouchDoc
	}
	batchUpdateDocumentsReturns struct {
		result1 []*couchdb.BatchUpdateResponse
		result2 error
	}
	batchUpdateDocumentsReturnsOnCall map[int]struct {
		result1 []*couchdb.BatchUpdateResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CouchDB) ReadDoc(id string) (*couchdb.CouchDoc, string, error) {
	fake.readDocMutex.Lock()
	ret, specificReturn := fake.readDocReturnsOnCall[len(fake.readDocArgsForCall)]
	fake.readDocArgsForCall = append(fake.readDocArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("ReadDoc", []interface{}{id})
	fake.readDocMutex.Unlock()
	if fake.ReadDocStub != nil {
		return fake.ReadDocStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.readDocReturns.result1, fake.readDocReturns.result2, fake.readDocReturns.result3
}

func (fake *CouchDB) ReadDocCallCount() int {
	fake.readDocMutex.RLock()
	defer fake.readDocMutex.RUnlock()
	return len(fake.readDocArgsForCall)
}

func (fake *CouchDB) ReadDocArgsForCall(i int) string {
	fake.readDocMutex.RLock()
	defer fake.readDocMutex.RUnlock()
	return fake.readDocArgsForCall[i].id
}

func (fake *CouchDB) ReadDocReturns(result1 *couchdb.CouchDoc, result2 string, result3 error) {
	fake.ReadDocStub = nil
	fake.readDocReturns = struct {
		result1 *couchdb.CouchDoc
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *CouchDB) ReadDocReturnsOnCall(i int, result1 *couchdb.CouchDoc, result2 string, result3 error) {
	fake.ReadDocStub = nil
	if fake.readDocReturnsOnCall == nil {
		fake.readDocReturnsOnCall = make(map[int]struct {
			result1 *couchdb.CouchDoc
			result2 string
			result3 error
		})
	}
	fake.readDocReturnsOnCall[i] = struct {
		result1 *couchdb.CouchDoc
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *CouchDB) SaveDoc(id string, rev string, couchDoc *couchdb.CouchDoc) (string, error) {
	fake.saveDocMutex.Lock()
	ret, specificReturn := fake.saveDocReturnsOnCall[len(fake.saveDocArgsForCall)]
	fake.saveDocArgsForCall = append(fake.saveDocArgsForCall, struct {
		id       string
		rev      string
		couchDoc *couchdb.CouchDoc
	}{id, rev, couchDoc})
	fake.recordInvocation("SaveDoc", []interface{}{id, rev, couchDoc})
	fake.saveDocMutex.Unlock()
	if fake.SaveDocStub != nil {
		return fake.SaveDocStub(id, rev, couchDoc)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.saveDocReturns.result1, fake.saveDocReturns.result2
}

func (fake *CouchDB) SaveDocCallCount() int {
	fake.saveDocMutex.RLock()
	defer fake.saveDocMutex.RUnlock()
	return len(fake.saveDocArgsForCall)
}

func (fake *CouchDB) SaveDocArgsForCall(i int) (string, string, *couchdb.CouchDoc) {
	fake.saveDocMutex.RLock()
	defer fake.saveDocMutex.RUnlock()
	return fake.saveDocArgsForCall[i].id, fake.saveDocArgsForCall[i].rev, fake.saveDocArgsForCall[i].couchDoc
}

func (fake *CouchDB) SaveDocReturns(result1 string, result2 error) {
	fake.SaveDocStub = nil
	fake.saveDocReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *CouchDB) SaveDocReturnsOnCall(i int, result1 string, result2 error) {
	fake.SaveDocStub = nil
	if fake.saveDocReturnsOnCall == nil {
		fake.saveDocReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.saveDocReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *CouchDB) QueryDocuments(query string) ([]*couchdb.QueryResult, string, error) {
	fake.queryDocumentsMutex.Lock()
	ret, specificReturn := fake.queryDocumentsReturnsOnCall[len(fake.queryDocumentsArgsForCall)]
	fake.queryDocumentsArgsForCall = append(fake.queryDocumentsArgsForCall, struct {
		query string
	}{query})
	fake.recordInvocation("QueryDocuments", []interface{}{query})
	fake.queryDocumentsMutex.Unlock()
	if fake.QueryDocumentsStub != nil {
		return fake.QueryDocumentsStub(query)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.queryDocumentsReturns.result1, fake.queryDocumentsReturns.result2, fake.queryDocumentsReturns.result3
}

func (fake *CouchDB) QueryDocumentsCallCount() int {
	fake.queryDocumentsMutex.RLock()
	defer fake.queryDocumentsMutex.RUnlock()
	return len(fake.queryDocumentsArgsForCall)
}

func (fake *CouchDB) QueryDocumentsArgsForCall(i int) string {
	fake.queryDocumentsMutex.RLock()
	defer fake.queryDocumentsMutex.RUnlock()
	return fake.queryDocumentsArgsForCall[i].query
}

func (fake *CouchDB) QueryDocumentsReturns(result1 []*couchdb.QueryResult, result2 string, result3 error) {
	fake.QueryDocumentsStub = nil
	fake.queryDocumentsReturns = struct {
		result1 []*couchdb.QueryResult
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *CouchDB) QueryDocumentsReturnsOnCall(i int, result1 []*couchdb.QueryResult, result2 string, result3 error) {
	fake.QueryDocumentsStub = nil
	if fake.queryDocumentsReturnsOnCall == nil {
		fake.queryDocumentsReturnsOnCall = make(map[int]struct {
			result1 []*couchdb.QueryResult
			result2 string
			result3 error
		})
	}
	fake.queryDocumentsReturnsOnCall[i] = struct {
		result1 []*couchdb.QueryResult
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *CouchDB) BatchUpdateDocuments(documents []*couchdb.CouchDoc) ([]*couchdb.BatchUpdateResponse, error) {
	var documentsCopy []*couchdb.CouchDoc
	if documents != nil {
		documentsCopy = make([]*couchdb.CouchDoc, len(documents))
		copy(documentsCopy, documents)
	}
	fake.batchUpdateDocumentsMutex.Lock()
	ret, specificReturn := fake.batchUpdateDocumentsReturnsOnCall[len(fake.batchUpdateDocumentsArgsForCall)]
	fake.batchUpdateDocumentsArgsForCall = append(fake.batchUpdateDocumentsArgsForCall, struct {
		documents []*couchdb.CouchDoc
	}{documentsCopy})
	fake.recordInvocation("BatchUpdateDocuments", []interface{}{documentsCopy})
	fake.batchUpdateDocumentsMutex.Unlock()
	if fake.BatchUpdateDocumentsStub != nil {
		return fake.BatchUpdateDocumentsStub(documents)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.batchUpdateDocumentsReturns.result1, fake.batchUpdateDocumentsReturns.result2
}

func (fake *CouchDB) BatchUpdateDocumentsCallCount() int {
	fake.batchUpdateDocumentsMutex.RLock()
	defer fake.batchUpdateDocumentsMutex.RUnlock()
	return len(fake.batchUpdateDocumentsArgsForCall)
}

func (fake *CouchDB) BatchUpdateDocumentsArgsForCall(i int) []*couchdb.CouchDoc {
	fake.batchUpdateDocumentsMutex.RLock()
	defer fake.batchUpdateDocumentsMutex.RUnlock()
	return fake.batchUpdateDocumentsArgsForCall[i].documents
}

func (fake *CouchDB) BatchUpdateDocumentsReturns(result1 []*couchdb.BatchUpdateResponse, result2 error) {
	fake.BatchUpdateDocumentsStub = nil
	fake.batchUpdateDocumentsReturns = struct {
		result1 []*couchdb.BatchUpdateResponse
		result2 error
	}{result1, result2}
}

func (fake *CouchDB) BatchUpdateDocumentsReturnsOnCall(i int, result1 []*couchdb.BatchUpdateResponse, result2 error) {
	fake.BatchUpdateDocumentsStub = nil
	if fake.batchUpdateDocumentsReturnsOnCall == nil {
		fake.batchUpdateDocumentsReturnsOnCall = make(map[int]struct {
			result1 []*couchdb.BatchUpdateResponse
			result2 error
		})
	}
	fake.batchUpdateDocumentsReturnsOnCall[i] = struct {
		result1 []*couchdb.BatchUpdateResponse
		result2 error
	}{result1, result2}
}

func (fake *CouchDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readDocMutex.RLock()
	defer fake.readDocMutex.RUnlock()
	fake.saveDocMutex.RLock()
	defer fake.saveDocMutex.RUnlock()
	fake.queryDocumentsMutex.RLock()
	defer fake.queryDocumentsMutex.RUnlock()
	fake.batchUpdateDocumentsMutex.RLock()
	defer fake.batchUpdateDocumentsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CouchDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
